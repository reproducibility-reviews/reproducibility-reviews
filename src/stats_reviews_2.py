# -*- coding: utf-8 -*-
"""stats_reviews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uh5cG6if9p_Ps8EmkqwbKVgLG5zS8wV-
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


def count_words(reviews: pd.DataFrame, histo_path: str):

    print("----------------------------------------------")
    print("Looking at the tsv")
    print("------------------")
    print(reviews)
    print("Sanity check")
    print("Review 1, line 0 : ", reviews['Review 1'][0])
    print("Review 2, line 1 : ", reviews['Review 2'][1])

    word_count = pd.DataFrame().reindex_like(reviews)
    word_count["Paper ID"]=reviews["Paper ID"]
    word_count["Paper title"]=reviews["Paper title"]
    for column in {"Review 1","Review 2","Review 3"}:
        word_count[column] = reviews[column].apply(lambda x: len(str(x).split()))
    word_count_array = word_count[['Review 1','Review 2','Review 3']].values.flatten()

    
    plt.figure(figsize=(8, 6))
    plt.hist(word_count_array, bins=100, alpha=0.5, edgecolor='k', label="Word count per review")

    plt.title('Distribution of Word Counts')
    plt.xlabel('Word Count')
    plt.ylabel('Frequency')
    plt.legend()
    plt.grid(True)
    plt.savefig(histo_path)

    print("\nMedian Word Count:",np.median(word_count_array))

    return word_count, word_count_array

def get_deciles(word_count_array: list):
    print("\nDeciles:")
    deciles = [np.percentile(word_count_array, i) for i in range(0, 100, 10)]
    for i, decile in enumerate(deciles, start=1):
        print(f"{i}0th Decile: {decile}")

    return deciles

def random_reviews(data_frame: pd.DataFrame, reviews: pd.DataFrame, deciles: list, nb_reviews: int =10, lower_bound: int = 0, upper_bound: int =1):
    print("*" * 100)
    print(f"{nb_reviews} random reviews between {lower_bound*10} and {upper_bound*10} percentiles")
    print("*" * 100)
    
    lower_bound_40th = deciles[lower_bound]
    upper_bound_60th = deciles[upper_bound]

    selected_reviews = reviews[
        ((data_frame['Review 1'] >= lower_bound_40th) & (data_frame['Review 1'] <= upper_bound_60th)) |
        ((data_frame['Review 2'] >= lower_bound_40th) & (data_frame['Review 2'] <= upper_bound_60th)) |
        ((data_frame['Review 3'] >= lower_bound_40th) & (data_frame['Review 3'] <= upper_bound_60th))
    ]

    selected_reviews_sample = selected_reviews.sample(nb_reviews)

    for _, row in selected_reviews_sample.iterrows():
        for col in ["Review 1", "Review 2", "Review 3"]:
            x = data_frame.at[_, col]
            if ((x >= lower_bound_40th) & (x<= upper_bound_60th)):
                #print(f"{col}:")
                print(row[col])
                print(f"Word Count: {x}")
                print("-" * 50)


def main():
    reviews = pd.read_table('3reviews.tsv')
    histo_path = 'distribution_word_counts.png'

    word_count, word_count_array = count_words(reviews, histo_path)

    deciles = get_deciles(word_count_array)

    random_reviews(word_count, reviews, deciles, 10, 4, 6)
    random_reviews(word_count, reviews, deciles, 10, 0, 3)


if __name__ == "__main__":
    main()